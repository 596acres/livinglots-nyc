{
  "name": "jquery-infinite-scroll",
  "version": "2.1.0",
  "dependencies": {
    "jquery": "~1.7.2"
  },
  "gitHead": "692f1f06c9272a3eea128ece1eec38d2dc5f172a",
  "readme": "# Infinite Scroll\n\n<http://www.infinite-scroll.com/>\n\nThe jQuery and WordPress Plugins:\n\n* jQuery Plugin <http://www.infinite-scroll.com/infinite-scroll-jquery-plugin/> `v2.0.2`\n* WordPress Plugin <http://www.infinite-scroll.com/installation/>\n\n\n##Methods##\nA method is a command you can use to control Infinite Scroll once the plugin has been initialized. You can call on any Infinite Scroll method by using `$('.selector').infinitescroll('method-name');`.\n\n**Bind**  \n`$('.selector').infinitescroll('bind');`  \nBinds selector to check on scroll to see if the plugin needs to load more content.\n\n**Unbind**  \n`$('.selector').infinitescroll('unbind');`  \nUnbinds selector to check on scroll to see if the plugin needs to load more content.\n\n**Destroy**  \n`$('.selector').infinitescroll('destroy');`  \nDestroys the instance of infinite scroll. This is create a flag to not load anymore content and will unbind all events.\n\n**Pause**  \n`$('.selector').infinitescroll('pause');`  \nPausing the plugin will temporarily create a flag to not retrieve content on scroll. To unpause, use the method `resume`.\n\n**Resume**  \n`$('.selector').infinitescroll('resume');`  \nDestroys the instance of infinite scroll. This is create a flag to not load anymore content and will unbind all events.\n\n**Toggle**  \n`$('.selector').infinitescroll('toggle');`  \nToggling will switch the `pause` value of the plugin, either pausing or resuming the plugin.\n\n**Retrieve**  \n`$('.selector').infinitescroll('retrieve');`  \nRetrieve will load the next page of content if available.\n\n**Scroll**  \n`$('.selector').infinitescroll('scroll');`  \nScroll will check to see if the next page is to be loaded, the same thing as if a user scrolled.\n\n**Update**  \n`$('.selector').infinitescroll('update', {debug: true});`  \nThe `update` method is used to update options in the instance of Infinite Scroll after initialization. The second argument is the object of options that you want to update.\n\n\n##Options##\nBetter documentation coming soon.\n\n```javascript\n$('.selector').infinitescroll({\n  loading: {\n    finished: undefined,\n    finishedMsg: \"<em>Congratulations, you've reached the end of the internet.</em>\",\n                img: null,\n    msg: null,\n    msgText: \"<em>Loading the next set of posts...</em>\",\n    selector: null,\n    speed: 'fast',\n    start: undefined\n  },\n  state: {\n    isDuringAjax: false,\n    isInvalidPage: false,\n    isDestroyed: false,\n    isDone: false, // For when it goes all the way through the archive.\n    isPaused: false,\n    currPage: 1\n  },\n  behavior: undefined,\n  binder: $(window), // used to cache the selector for the element that will be scrolling\n  nextSelector: \"div.navigation a:first\",\n  navSelector: \"div.navigation\",\n  contentSelector: null, // rename to pageFragment\n  extraScrollPx: 150,\n  itemSelector: \"div.post\",\n  animate: false,\n  pathParse: undefined,\n  dataType: 'html',\n  appendCallback: true,\n  bufferPx: 40,\n  errorCallback: function () { },\n  infid: 0, //Instance ID\n  pixelsFromNavToBottom: undefined,\n  path: undefined, // Can either be an array of URL parts (e.g. [\"/page/\", \"/\"]) or a function that accepts the page number and returns a URL\n  maxPage:undefined // to manually control maximum page (when maxPage is undefined, maximum page limitation is not work)\n});\n```\n\n\n### Examples\n\n### Scrolling inside an element\n\nTo scroll inside an element having `overflow`, use the `local` behavior.\n\n```javascript\n$('.selector').infinitescroll({\n  behavior: 'local',\n  binder: $('.selector'), // scroll on this element rather than on the window\n  // other options\n});\n```\n\n### Loading JSON data\n\nAs explained on the website, Infinite Scroll is designed for progressive enhancement, using existing pagination links. However, it is still possible to work with JSON data.\n\nIt means the `nextSelector` href will be called via AJAX, expecting JSON data, which will be passed to the callback function.\n\n```javascript\n$('.selector').infinitescroll({\n  // other options\n  dataType: 'json',\n  appendCallback: false\n}, function(json, opts) {\n  // Get current page\n  var page = opts.state.currPage;\n  // Do something with JSON data, create DOM elements, etc ..\n});\n```\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Paul Irish\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "description": "<http://www.infinite-scroll.com/>",
  "_id": "jquery-infinite-scroll@2.1.0",
  "_shasum": "9a1a6d608a95c14900922ed31810a7883b58f47e",
  "_from": "git://github.com/paulirish/infinite-scroll",
  "_resolved": "git://github.com/paulirish/infinite-scroll#692f1f06c9272a3eea128ece1eec38d2dc5f172a",
  "_fromGithub": true
}
